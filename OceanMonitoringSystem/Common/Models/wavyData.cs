using LiteDB;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Models
{
    /**
     * @class SensorData
     * @description Represents sensor data as stored in the central server database.
     * This is the final persistence model used for data storage and analysis.
     * Used primarily by the Server component.
     */
    public class SensorData
    {
        /** @property Unique identifier for the database record (auto-generated by LiteDB) */
        public ObjectId Id { get; set; }
        
        /** @property Identifier of the originating Wavy device */
        public string WavyId { get; set; }
        
        /** @property Identifier of the Aggregator that forwarded the data */
        public string AggregatorId { get; set; }
        
        /** @property Type of sensor data (e.g., "temperature", "waterLevel", etc.) */
        public string DataType { get; set; }
        
        /** @property Time when the measurement was taken by the Wavy device */
        public DateTime Timestamp { get; set; }
        
        /** @property The actual sensor reading value (stored as string for flexibility) */
        public string RawValue { get; set; }
        
        /** @property Time when the data was received by the central server */
        public DateTime ReceivedAt { get; set; }
    }

    /**
     * @class AggregatorSensorData
     * @description Represents sensor data as collected and forwarded by Aggregators.
     * This format is used for transmission between Aggregators and the Server.
     * Used primarily by the Aggregator component.
     */
    public class AggregatorSensorData
    {
        /** @property Identifier of the originating Wavy device */
        public string WavyId { get; set; }
        
        /** @property Identifier of the Aggregator forwarding the data */
        public string AggregatorId { get; set; }
        
        /** @property Type of sensor data (e.g., "temperature", "waterLevel", etc.) */
        public string DataType { get; set; }
        
        /** @property Time when the data was collected, defaults to current UTC time */
        public DateTime Timestamp { get; set; } = DateTime.UtcNow;
        
        /** @property The actual sensor reading value */
        public string RawValue { get; set; }
    }

    /**
     * @class Aggregator
     * @description Represents an Aggregator node in the system.
     * Used to track connected Aggregators and their status in the Server.
     */
    public class Aggregator
    {
        /** @property Unique identifier for the Aggregator node */
        public string ClientId { get; set; }
        
        /** @property Current connection status (e.g., "CONNECTED", "DISCONNECTED") */
        public string Status { get; set; }
        
        /** @property Timestamp when the Aggregator was first registered with the system */
        public DateTime RegisteredAt { get; set; } = DateTime.Now;
        
        /** @property Timestamp of the most recent connection by this Aggregator */
        public DateTime LastConnectedAt { get; set; } = DateTime.Now;
    }

    /**
     * @class DataWavy
     * @description Represents raw sensor data as generated by Wavy devices.
     * This is the initial format used for transmission from Wavy to Aggregator.
     * Used primarily by the Wavy component.
     */
    public class DataWavy
    {
        /** @property Type of sensor data (e.g., "temperature", "waterLevel", etc.) */
        public string dataType { get; set; }
        
        /** @property Time when the measurement was taken, defaults to current UTC time */
        public DateTime Timestamp { get; set; } = DateTime.UtcNow;
        
        /** @property The actual sensor reading value */
        public string value { get; set; }
    }
}
