services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: oceanguest
      RABBITMQ_DEFAULT_PASS: oceanpass
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ocean_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  server:
    build:
      context: ./OceanMonitoringSystem
      dockerfile: Server/Dockerfile
    ports:
      - "8080:8080"   # TCP listener port
      - "5001:5001"   # Web server port
    volumes:
      - server_data:/app/data
    networks:
      - ocean_network

  aggregator1:
    build:
      context: ./OceanMonitoringSystem
      dockerfile: Aggregator/Dockerfile
    environment:
      - AGGREGATOR_ID=humidity_agg
      - SENSOR_TYPES=humidity,waterLevel
      - AGGREGATOR_PORT=9000
      - SERVER_IP=server
      - SERVER_PORT=8080
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=oceanguest
      - RABBITMQ_PASSWORD=oceanpass
    ports:
      - "9000:9000"
    volumes:
      - aggregator1_data:/app/data
    networks:
      - ocean_network
    depends_on:
      rabbitmq:
        condition: service_healthy
      server:
        condition: service_started

  aggregator2:
    build:
      context: ./OceanMonitoringSystem
      dockerfile: Aggregator/Dockerfile
    environment:
      - AGGREGATOR_ID=temperature_agg
      - SENSOR_TYPES=temperature,windSpeed
      - AGGREGATOR_PORT=9001
      - SERVER_IP=server
      - SERVER_PORT=8080
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=oceanguest
      - RABBITMQ_PASSWORD=oceanpass
    ports:
      - "9001:9001"
    volumes:
      - aggregator2_data:/app/data
    networks:
      - ocean_network
    depends_on:
      rabbitmq:
        condition: service_healthy
      server:
        condition: service_started

  wavy1:
    build:
      context: ./OceanMonitoringSystem
      dockerfile: Wavy/Dockerfile
    environment:
      - WAVY_ID=wavy1
      - AGGREGATOR_QUEUE=legacy_queue  # Legacy support
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=oceanguest
      - RABBITMQ_PASSWORD=oceanpass
    networks:
      - ocean_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  wavy2:
    build:
      context: ./OceanMonitoringSystem
      dockerfile: Wavy/Dockerfile
    environment:
      - WAVY_ID=wavy2
      - AGGREGATOR_QUEUE=legacy_queue  # Legacy support
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=oceanguest
      - RABBITMQ_PASSWORD=oceanpass
    networks:
      - ocean_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  wavy3:
    build:
      context: ./OceanMonitoringSystem
      dockerfile: Wavy/Dockerfile
    environment:
      - WAVY_ID=wavy3
      - AGGREGATOR_QUEUE=legacy_queue  # Legacy support
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=oceanguest
      - RABBITMQ_PASSWORD=oceanpass
    networks:
      - ocean_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  python-analysis:
    build:
      context: ./OceanMonitoringSystem
      dockerfile: PythonAnalysisService/Dockerfile
    ports:
      - "50052:50052"
    networks:
      - ocean_network

  rpc-go-datatype:
    build:
      context: ./OceanMonitoringSystem/rpcGoDatatype
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    networks:
      - ocean_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ocean_network:
    driver: bridge

volumes:
  rabbitmq_data:
  server_data:
  aggregator1_data:
  aggregator2_data:
  web_control_data: